{"version":3,"sources":["redux/todo-reducer.js","redux/redux-store.js","reportWebVitals.js","media-styles/media-css.js","App.js","AppContainer.js","index.js"],"names":["ADD_POST","UPDATE_NEW_POST","DELETE_POST","CHECKED_POST","initialState","posts","newPostText","todoReducer","state","action","type","newPost","message","checked","newText","filter","_","p","id","map","index","reducers","combineReducers","todoPage","store","createStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","Button","styled","button","MainWindow","div","Textarea","textarea","PostItem","TextP","App","props","messagesElement","className","icon","faTrashAlt","onClick","deletePost","faCheck","checkedPost","onChange","e","post","target","value","updateNewPost","addPost","appContainer","connect","dispatch","addPostAC","text","updateNewPostAC","deletePostAC","checkedPostAC","ReactDOM","render","StrictMode","AppContainer","document","getElementById"],"mappings":"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","file":"static/js/main.1ec54cbd.chunk.js","sourcesContent":["const ADD_POST = 'ADD_POST';\nconst UPDATE_NEW_POST = 'UPDATE_NEW_POST';\nconst DELETE_POST = 'DELETE_POST';\nconst CHECKED_POST = 'CHECKED_POST';\n\nlet initialState = {\n    posts: [  ],\n    newPostText: ''\n}\n\nconst todoReducer = (state = initialState, action) => {\n\n    switch(action.type) {\n        case ADD_POST: \n        let newPost = state.newPostText;\n            return {\n                ...state,\n                newPostText: '',\n                posts: [...state.posts, {message: newPost, checked: false}]\n            }\n        case UPDATE_NEW_POST: \n            return {\n                ...state,\n                newPostText: action.newText\n            }\n        case DELETE_POST: \n            return {\n                ...state,\n                posts: [...state.posts.filter((_, p) => p !== action.id)]\n            }\n        case CHECKED_POST: \n            return {\n                ...state,\n                posts: state.posts.map( (p, index) => {\n                    if (action.id === index && p.checked === false) {\n                        return {...p, checked: true}\n                    } else if (action.id === index && p.checked === true) {\n                        return {...p, checked: false}\n                    }\n                    return p\n                })\n            }\n        default:\n            return state; \n    }\n}\n\nexport const addPostAC = (id) => {\n    return {\n        type: ADD_POST,\n        id\n    }\n}\n\nexport const updateNewPostAC = (text) => {\n    return {\n        type: UPDATE_NEW_POST,\n        newText: text\n    }\n}\n\nexport const deletePostAC = (id) => {\n    return {\n        type: DELETE_POST,\n        id\n    }\n}\n\nexport const checkedPostAC = (id) => {\n    return {\n        type: CHECKED_POST,\n        id\n    }\n}\n\nexport default todoReducer;","import {createStore, combineReducers} from 'redux';\nimport todoReducer from './todo-reducer';\n\nlet reducers = combineReducers({\n    todoPage: todoReducer\n});\n\nlet store = createStore(reducers);\n\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const size = {\n    mobileS: '320px',\n    mobileM: '375px',\n    mobileL: '425px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n    desktop: '2560px'\n}\n\nexport const device = {\n    mobileS: `(max-width: ${size.mobileS})`,\n    mobileM: `(max-width: ${size.mobileM})`,\n    mobileL: `(max-width: ${size.mobileL})`,\n    tablet: `(max-width: ${size.tablet})`,\n    laptop: `(max-width: ${size.laptop})`,\n    laptopL: `(max-width: ${size.laptopL})`,\n    desktop: `(max-width: ${size.desktop})`,\n    desktopL: `(max-width: ${size.desktop})`\n};","import './App.css';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrashAlt, faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport {device} from './media-styles/media-css';\n\nconst Button = styled.button`\n        background-image: linear-gradient(to right, #ff6e7f 0%, #bfe9ff  51%, #ff6e7f  100%);\n        text-align: center;\n        text-transform: uppercase;\n        transition: 0.5s;\n        background-size: 200% auto;\n        color: white;            \n        box-shadow: 0 0 20px #eee;\n        border-radius: 100%;\n        position: absolute;\n        bottom: -20px;\n        left: 170px;\n        width: 50px;\n        height: 50px;\n        border: none;\n        display: block;\n        cursor: pointer;\n        outline: none;\n      &:hover {\n        background-position: right center; /* change the direction of the change here */\n      color: #fff;\n      text-decoration: none;\n`;\n\n  const MainWindow = styled.div`\n        display: flex;\n        flex-direction: column;\n        max-width: 400px;\n        margin-left: auto;\n        margin-right: auto;\n        margin-top: 150px;\n        margin-bottom: 100px;\n        background: #fff;\n        -webkit-box-shadow: 0px 0px 24px -3px rgba(0,0,0,0.46); \n        box-shadow: 0px 0px 24px -3px rgba(0,0,0,0.46);\n        padding: 50px;\n        border-radius: 10px;\n        @media ${device.mobileL} { \n          max-width: 250px;\n        }\n  `;\n\n  const Textarea = styled.textarea`\n        border-radius: 20px;\n        -webkit-box-shadow: 0px 0px 24px -3px rgba(0,0,0,0.46); \n        -webkit-appearance : none;\n        box-shadow: 0px 0px 24px -3px rgba(0,0,0,0.46);\n        outline: none;\n        padding: 20px;\n        border: none;\n        resize: none;\n        width:100%; max-width:300px;\n        &:focus {\n          box-shadow: 0px 0px 24px -3px #C850C0;\n          transition: .5s;\n        }\n        @media ${device.mobileL} { \n          max-width: 220px;\n        }\n  `;\n\n  const PostItem = styled.div`\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-top: 20px;\n        padding: 12px;\n        border-radius: 10px;\n        background-color: #4158D0;\n        background-image: linear-gradient(43deg, #4158D0 0%, #C850C0 46%, #FFCC70 100%);\n        .iconBtn {\n          margin-top: 0;\n          color: #fff;\n          font-size: 22px;\n          cursor: pointer;\n          margin-right: 10px;\n          &:hover {\n            opacity: 0.5;\n            transition: .5s;\n          }\n        }\n      \n  `;\n\n  const TextP = styled.p`\n        color: #fff;\n        min-width: 230px;\n        margin: 0;\n        @media ${device.tablet} { \n          min-width: auto!important;\n        }\n  `\n\n\nconst App = (props) => {\n\n  \n\n  let newPostText = props.newPostText;\n  \n\n  let messagesElement = props.posts\n        .map( (p, index) => \n            \n            <PostItem key={index} className={p.checked ? 'postItem checked' : 'postItem'}>\n              <TextP className=\"needDo\">{p.message} </TextP>\n              <TextP className=\"alreadyDo\">Сделано </TextP>\n              <div>\n                <FontAwesomeIcon icon={faTrashAlt} className='iconBtn deleteBtn' onClick={() => {props.deletePost(index)}} />\n                <FontAwesomeIcon icon={faCheck} className='iconBtn' onClick={() => {props.checkedPost(index)}} />\n              </div>\n            </PostItem>\n            );\n\n  let addPost = () => {\n    props.addPost();\n  }\n\n  let updateNewPost = (e) => {\n    let post = e.target.value;\n    props.updateNewPost(post);\n  }\n\n  return (\n    <div>\n        <MainWindow>\n            <h1>Список дел</h1>\n            <div className=\"textBtn\">\n              <Textarea onChange={updateNewPost} value={newPostText} ></Textarea>\n              <Button onClick={addPost} >+</Button>\n            </div>\n            {messagesElement}\n        </MainWindow>\n    </div>\n  );\n}\n\nexport default App;\n","import {connect} from 'react-redux';\nimport {addPostAC, updateNewPostAC, deletePostAC, checkedPostAC} from './redux/todo-reducer';\nimport App from './App';\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.todoPage.posts,\n        newPostText: state.todoPage.newPostText \n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (id) => {\n            dispatch(addPostAC(id));\n        },\n        updateNewPost: (text) => {\n            dispatch(updateNewPostAC(text));\n        },\n        deletePost: (id) => {\n            dispatch(deletePostAC(id));\n        },\n        checkedPost: (id) => {\n            dispatch(checkedPostAC(id));\n        }\n    }\n}\n\nconst appContainer = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default appContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './redux/redux-store';\nimport reportWebVitals from './reportWebVitals';\nimport AppContainer from './AppContainer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}